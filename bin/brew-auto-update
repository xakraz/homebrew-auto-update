#!/usr/bin/env bash
#
# == Make the script fail fast
# - Any error
# - Any unbound variables
# - SubShell failed
set -e
set -u
set -o pipefail


# == Define some variables
#
# Load Homebrew prefix
readonly PATH=/usr/local/bin:$PATH

# 'Terminal-notifier' config
readonly NOTIFICATION_GROUP='com.xakraz.BrewAutoUpdate'
readonly NOTIFICATION_SOUND='Glass'
readonly NOTIFICATION_TITLE='Homebrew'

readonly PROGNAME=$(basename $0)
readonly PROGDIR=$(readlink -m $(dirname $0))


# == Check OS X system settings.
#
# Note Homebrew terminology is different from OS X:
#
# Homebrew: update -> fetch    -> upgrade
# OS X:     check  -> download -> update
#
# The following environment variables HOMEBREW_AUTO_XXX can be set with the `launchctl` utility
# or permanently in config files.
#
# http://www.launchd.info/
# - Tab 'Configuration'
# - Section 'Setting environment variables:'
readonly AUTO_UPDATE=${HOMEBREW_AUTO_UPDATE:-$(defaults read /Library/Preferences/com.apple.SoftwareUpdate AutomaticCheckEnabled)}
readonly AUTO_FETCH=${HOMEBREW_AUTO_FETCH:-$(defaults read /Library/Preferences/com.apple.SoftwareUpdate AutomaticDownload)}
readonly AUTO_UPGRADE=${HOMEBREW_AUTO_UPGRADE:-$(defaults read /Library/Preferences/com.apple.commerce AutoUpdate)}


# == Sanity and runtime checks
#
# Don't run if auto-update is disabled
if [ "$AUTO_UPDATE" != 1 ]; then
  exit
fi

# Only run if GitHub is reachable
if [ "$(scutil -r github.com)" != 'flags = Reachable' ]; then
  exit
fi

# Check which Terminal app to open if notification is clicked by user
for termapp in iTerm Terminal; do
  if termapp_id=$(osascript -e "id of app \"$termapp\"" 2>/dev/null) && [ -n "$termapp_id" ]; then
    break
  fi
done


# == Functions
#
function show_notification () {
  local notification_subtitle="$1"
  local notification_message="$2"

  shift
  shift
  local other="$@"

  terminal-notifier \
    -group "$NOTIFICATION_GROUP" \
    -sound "$NOTIFICATION_SOUND" \
    -title "$NOTIFICATION_TITLE" \
    -subtitle "$notification_subtitle" \
    -message "$notification_message" \
    -activate "$termapp_id" \
    $other \
    >/dev/null
}


main(){
  # Run brew update and notify user if it failed
  if ! out=$(brew update 2>&1); then
    show_notification 'update failed' "$out"
    exit 1
  fi


  # Determine which installed formulae are outdated
  outdated=$(brew outdated | tr '\n' ' ' | sed 's/ $//')

  # If no formulae are outdated...
  if [ -z "$outdated" ]; then
    # remove old notifications if there are no longer outdated packages
    terminal-notifier -remove "$NOTIFICATION_GROUP" >/dev/null
    exit 0;
  fi


  # Upgrade outdated packages if auto-upgrade is enabled
  if [ "$AUTO_UPGRADE" = 1 ]; then
    brew upgrade $outdated || :
    show_notification 'upgraded packages' "$outdated"
    exit 0;
  fi


  # Fetch outdated packages if auto-fetch is enabled
  if [ "$AUTO_FETCH" = 1 ]; then
    brew fetch $outdated || :
  fi


  # Notify user of outdated packages
  show_notification 'package updates available' \
    "$outdated" \
    "-closeLabel No -actions Yes -execute '/usr/local/bin/brew upgrade'"


  # Check if upgrades have been applied
  # (if user has clicked action 'YES' on the notification)
  new_outdated=$(brew outdated | tr '\n' ' ' | sed 's/ $//')
  if [ -z "$new_outdated" ]; then
    # Notify it has been applied successfully
    show_notification 'upgraded packages' "$outdated"
  fi

  exit 0;
}
main
