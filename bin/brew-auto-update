#!/bin/bash

set -eu
set -o pipefail

PATH=/usr/local/bin:$PATH

NOTIFICATION_GROUP='com.straxhaber.BrewAutoUpdate'
NOTIFICATION_SOUND='Glass'
NOTIFICATION_TITLE='Homebrew'

# Check OS X system settings. Note Homebrew terminology is different from OS X:
#
# Homebrew: update -> fetch    -> upgrade
# OS X:     check  -> download -> update
#
auto_update=${HOMEBREW_AUTO_UPDATE:-$(defaults read /Library/Preferences/com.apple.SoftwareUpdate AutomaticCheckEnabled)}
auto_fetch=${HOMEBREW_AUTO_FETCH:-$(defaults read /Library/Preferences/com.apple.SoftwareUpdate AutomaticDownload)}
auto_upgrade=${HOMEBREW_AUTO_UPGRADE:-$(defaults read /Library/Preferences/com.apple.commerce AutoUpdate)}

# Don't run if auto-update is disabled
if [ "$auto_update" != 1 ]; then
  exit
fi

# Only run if GitHub is reachable
if [ "$(scutil -r github.com)" != 'Reachable' ]; then
  exit
fi

# Check which Terminal app to open if notification is clicked by user
for termapp in iTerm Terminal; do
  if termapp_id=$(osascript -e "id of app \"$termapp\"" 2>/dev/null) && [ -n "$termapp_id" ]; then
    break
  fi
done

function show_notification () {
  notification_subtitle="$1"
  notification_message="$2"
  terminal-notifier \
    -group "$NOTIFICATION_GROUP" \
    -sound "$NOTIFICATION_SOUND" \
    -title "$NOTIFICATION_TITLE" \
    -subtitle "$notification_subtitle" \
    -message "$notification_message" \
    -activate "$termapp_id" \
    >/dev/null
}

# Run brew update and notify user if it failed
if ! out=$(brew update 2>&1); then
  show_notification 'update failed' "$out"
  exit 1
fi

# Determine if any formulae were updated
if printf "%s" "$out" | grep 'Already up-to-date.'; then
  updated=false
else
  updated=true
fi

# Determine which installed formulae are outdated
outdated=$(brew outdated | tr '\n' ' ' | sed 's/ $//')
if [ -n "$outdated" ]; then

# If formulae were updated and installed packages are outdated...
if [ -n "$outdated" ]; then
  if [ "$auto_upgrade" = 1 ]; then
    # Upgrade outdated packages if auto-upgrade is enabled
    brew upgrade $outdated || :
  else
    # Fetch outdated packages if auto-fetch is enabled
    if [ "$auto_fetch" = 1 ]; then
      brew fetch $outdated || :
    fi

    # Notify user of outdated packages
    show_notification 'package updates available' "$outdated"
  fi
else
  # remove old notifications if there are no longer outdated packages
  terminal-notifier -remove "$NOTIFICATION_GROUP" >/dev/null
fi
